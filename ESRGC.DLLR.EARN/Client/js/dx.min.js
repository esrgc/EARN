if ("undefined" == typeof _d || !_d) var _d = {
    version: "0.1-dev",
    app: {
        model: {},
        view: {},
        controller: {}
    },
    data: {
        store: {}
    },
    noConflict: function() {
        return _d;
    },
    log: function(e) {
        "undefined" != typeof console && console.log(e);
    },
    application: function(e) {
        this.appInstance = new _d.app.Application(e);
    },
    defineController: function(e, t) {
        var n = this;
        if ("undefined" == typeof t) throw "Can not define controller " + e + ". Prototype is undefined";
        "undefined" == typeof t.extend && (t.extend = _d.app.Controller), t._className = "dx.app.controller." + e, 
        t.name = e, n.app.controller[e] = _d.define(t);
    },
    defineView: function(e, t) {
        var n = this;
        if ("undefined" == typeof t) throw "Can not define view " + e + ". Prototype is undefined";
        "undefined" == typeof t.extend && (t.extend = _d.app.View), t._className = "dx.app.view." + e, 
        n.app.view[e] = _d.define(t);
    },
    defineModel: function(e, t) {
        var n = this;
        if ("undefined" == typeof t) throw "Can not define model " + e + ". Prototype is undefined";
        "undefined" == typeof t.extend && (t.extend = _d.app.Model), t._className = "dx.app.model." + e, 
        n.app.model[e] = _d.define(t);
    },
    defineStore: function(e, t) {
        var n = this;
        if ("undefined" == typeof t) throw "Can not define store " + e + ". Prototype is undefined";
        "undefined" == typeof t.extend && (t.extend = _d.data.Store), t._className = "dx.data.store." + e, 
        n.data.store[e] = _d.define(t);
    },
    getApp: function() {
        return "undefined" != typeof window._appName ? window[window._appName] : void 0;
    },
    getModel: function(e) {
        var t = this.getApp()._models;
        if ("undefined" != typeof t) for (var n in t) {
            var o = t[n];
            if (o.name == e) return modelcm;
        }
    },
    getView: function(e) {
        var t = this.getApp()._views;
        if ("undefined" != typeof t) for (var n in t) {
            var o = t[n];
            if (o.name == e) return o;
        }
    },
    getController: function(e) {
        var t = this.getApp()._controllers;
        if ("undefined" != typeof t) for (var n in t) {
            var o = t[n];
            if (o.name == e) return o;
        }
    },
    getStore: function(e) {
        var t = this.getApp()._stores;
        if ("undefined" != typeof t) for (var n in t) {
            var o = t[n];
            if (o.name == e) return o;
        }
    }
};

window.dx = _d, _d.define = function(e) {
    var t = e, n = t.extend, o = null;
    return null == n || "undefined" == typeof n ? (o = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, o.prototype = t) : (o = function() {
        var e = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof e && e.apply(this, arguments);
    }, _d.extend(o, n), _d.copy(o.prototype, t)), o;
}, _d.extend = function(e, t) {
    var n = function() {};
    n.prototype = t.prototype, e.prototype = new n(), e.prototype.constructor = e, e.parent = t.prototype;
}, _d.copy = function(e, t) {
    if (e = e || {}, t) {
        for (var n in t) {
            var o = t[n];
            void 0 !== o && (e[n] = o);
        }
        var i = "function" == typeof window.Event && t instanceof window.Event;
        !i && t.hasOwnProperty && t.hasOwnProperty("toString") && (e.toString = t.toString);
    }
}, _d.Component = _d.define({
    _className: "dx.Component",
    on: function(e, t) {
        this.events[e] = t;
    },
    initialize: function(e) {
        _d.copy(this, e), this.events = {};
    }
}), _d.app.Application = _d.define({
    name: "Application",
    extend: dx.Component,
    _className: "dx.app.Application",
    initialize: function() {
        dx.Component.prototype.initialize.apply(this, arguments), _d.log("Initializing application " + this.name + "..."), 
        window._appName = this.name, window[this.name] = {
            name: this.name,
            appData: {},
            app: _d.app,
            data: _d.data,
            _stores: [],
            _models: [],
            _views: [],
            _controllers: []
        };
        var e = window[this.name];
        for (var t in this.stores) {
            var n = this.stores[t];
            e._stores.push(new e.data.store[n]());
        }
        for (var t in this.models) {
            var o = this.models[t];
            e._models.push(new e.app.model[o]());
        }
        for (var t in this.views) {
            var i = this.views[t];
            e._views.push(new e.app.view[i]());
        }
        for (var t in this.controllers) {
            var a = this.controllers[t];
            e._controllers.push(new e.app.controller[a]());
        }
        "function" == typeof this.launch && this.launch.apply(this);
    }
}), _d.app.Controller = _d.define({
    extend: dx.Component,
    _className: "dx.app.Controller",
    initialize: function() {
        dx.Component.prototype.initialize.apply(this, arguments);
        for (var e in this.refs) {
            var t = e.toString(), t = t.slice(0, 1).toUpperCase() + t.slice(1, t.length), n = this.refs[e];
            this["get" + t] = function(e) {
                return function(t) {
                    return "undefined" != typeof t ? $(e, t) : $(e);
                };
            }(n);
        }
        for (var e in this.refs) for (var o in this.control) if (e == o) {
            var i = this.control[o];
            for (var a in i) {
                var r = this[i[a]];
                $(document).on(a, this.refs[e], {
                    scope: this,
                    handler: r
                }, function(e) {
                    var t = e.data.scope, n = e.data.handler;
                    "undefined" == typeof n ? log("no event handler found for " + e.type + " on  " + e.target) : "function" == typeof n && n.call(t, e, this);
                });
            }
        }
        _d.log("initialized controller: " + this.name);
    },
    getFormData: function(e) {
        var t;
        if (t = "string" == typeof e ? $(e).serializeArray() : e.serializeArray(), 0 != t.length) {
            var n = {};
            return $.each(t, function(e, t) {
                n[t.name] = t.value;
            }), n;
        }
    },
    getDataStore: function() {
        return "undefined" != typeof this.dataStore ? _d.getStore(this.dataStore) : null;
    },
    getRef: function(e) {
        return "undefined" != typeof this.refs[e] ? this.refs[e] : void 0;
    },
    refs: {},
    control: {}
}), _d.app.Model = _d.define({
    extend: dx.Component,
    _className: "dx.app.Model",
    initialize: function() {
        dx.Component.prototype.initialize.apply(this, arguments);
    },
    fields: {}
}), _d.app.View = _d.define({
    extend: dx.Component,
    _className: "dx.app.View",
    initialize: function() {
        dx.Component.prototype.initialize.apply(this, arguments);
    }
}), _d.data.Store = _d.define({
    extend: dx.Component,
    _className: "dx.data.Store",
    model: "",
    dataRoot: "",
    type: "json",
    autoLoad: !1,
    initialize: function(e) {
        dx.Component.prototype.initialize.apply(this, arguments), "function" == typeof this.init && this.init.apply(this, e), 
        this.autoLoad && this.loadJson(), _d.log("initialized store: " + this.name);
    },
    loadJson: function(e) {
        var t = this;
        if ("function" == typeof this.events.beforeLoad && this.events.beforeLoad.call(t, this), 
        "undefined" == typeof this.url) return log("No url was defined. " + this._className + ".loadJson()"), 
        void 0;
        var n = function(e) {
            if ("" != t.dataRoot && (e = e[t.dataRoot]), t.originalData = e, "" != t.model) {
                var n = new ESRGC.Model[t.model]();
                t.data = [];
                for (var o in e) {
                    var i = e[o], a = {};
                    for (var r in n.fields) {
                        var d = n.fields[r], s = d.type, f = i[d.name];
                        switch (s) {
                          case "string":
                            a[d.name] = new String(f);
                            break;

                          case "int":
                            a[d.name] = new Number(f);
                            break;

                          case "date":
                            a[d.name] = new Date(f);
                            break;

                          case "boolean":
                            a[d.name] = new Boolean(f);
                        }
                    }
                    t.data.push(a);
                }
            }
            "function" == typeof t.events.load && t.events.load.call(t, t, e);
        }, o = function() {
            "function" == typeof t.errorCallback ? t.errorCallback.call(t) : alert("An error has occured. Store." + t.name + ".loadJson()");
        };
        if ("undefined" == typeof e || "get" == e) {
            var i = this.constructParams();
            $.getJSON(i, n).error(o);
        } else "post" == e && $.post(this.url, this.params, n).error(o);
    },
    loadContent: function(e) {
        var t = this;
        if ("function" == typeof this.events.beforeLoad && this.events.beforeLoad.call(t, this), 
        "undefined" == typeof this.url) return log("No url was defined. " + this.CLASSNAME + ".loadContent()"), 
        void 0;
        var n = function(e) {
            "function" == typeof t.events.load && t.events.load.call(t, t, e);
        }, o = function() {
            "undefined" != typeof t.errorCallback ? t.errorCallback.call(t) : alert("An error has occured. Store." + t.name + ".loadContent(). Url: " + t.url);
        };
        if ("undefined" == typeof e || "get" == e) {
            var i = this.constructParams();
            $.get(i, n).error(o);
        } else "post" == e && $.post(this.url, this.params, n).error(o);
    },
    loadContentUrl: function(e) {
        var t = this;
        if ("function" == typeof this.events.beforeLoad && this.events.beforeLoad.call(t, this), 
        "undefined" == typeof e) return log("No url was defined. " + this.CLASSNAME + ".loadContentUrl()"), 
        void 0;
        var n = function(e) {
            "function" == typeof t.events.load && t.events.load.call(t, t, e);
        }, o = function() {
            "undefined" != typeof t.errorCallback ? t.errorCallback.call(t) : alert("An error has occured. Store." + t.name + ".loadContentUrl()");
        };
        $.get(e, n).error(o);
    },
    constructParams: function(e) {
        var t = [];
        for (var n in this.params) {
            var o = this.params[n];
            t.push(n + "=" + o);
        }
        "undefined" == typeof e && (e = this.url);
        for (var i = 0; i < t.length; i++) 0 == i && t.length > 0 ? e += "?" + t[i] : t.length > 0 && (e += "&" + t[i]);
        return "jsonp" == this.type && (e += "&outFields=&f=json&callback=?"), e;
    },
    setParams: function(e) {
        this.params = e;
    },
    getParams: function() {
        return this.params;
    },
    getData: function() {
        return "undefined" != typeof this.data ? this.data : (log("store " + this.ClassName + " has no data"), 
        void 0);
    },
    getResponseData: function() {
        return "undefined" != typeof this.originalData ? this.originalData : (log("store " + this.ClassName + " has no response data"), 
        void 0);
    },
    getRecord: function(e, t) {
        if ("undefined" != typeof this.data) for (var n in this.data) {
            var o = this.data[n];
            if (o[e] == t) return o;
        }
    }
});