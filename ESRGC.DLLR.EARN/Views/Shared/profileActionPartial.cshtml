@using ESRGC.DLLR.EARN.Domain.Model
@model Profile
@{
    //var filters = (ViewBag.filters as Dictionary<string, object>) ?? new Dictionary<string, object>();
    //var currentTags = filters.ContainsKey("tags") ? filters["tags"] as List<string> : new List<string>();
    var currentProfile = ViewBag.CurrentProfile as Profile ?? new Profile();
    var returnUrl = ViewBag.returnUrl as string ?? "";
    var partnership = ViewBag.partnership as Partnership ?? null;
    var messageUrl = Url.Action("index", "Message") + "#new/" + Model.Organization.Name;
}

@if (currentProfile.ProfileID != Model.ProfileID) { 
    <div class="dropdown">
        <a class="btn btn-primary btn-xs dropdown-toggle" href="#" data-toggle="dropdown">Actions&nbsp;<b class="caret"></b></a>
        <ul class="dropdown-menu">
            <li><a href="@Url.Action("ViewProfile", "Profile", new { Model.ProfileID, returnUrl })">View Organizational Profile</a></li>
            @if (!currentProfile.hasConnection(Model)) { 
                <li><a href="@Url.Action("AddConnection", "Connection", new { Model.ProfileID, returnUrl })">Add as Connection</a></li>
            }
            else {
                <li><a href="@Url.Action("RemoveConnection", "Connection", new { Model.ProfileID, returnUrl })">Remove as Connection</a></li>
            }
            @if (currentProfile.hasOwnedPartnerships()) { 
                <li><a href="@Url.Action("InviteToPartnership", "Communication", new { Model.ProfileID, returnUrl })">Invite to Partnership Profile</a></li>
            }
            @if (partnership != null) { 
                <li><a href="@Url.Action("RemovePartner", "Partnership", new { partnership.PartnershipID, Model.ProfileID, returnUrl })">Remove from Partnership Profile</a></li>
            }
          <li><a href="@messageUrl">Send Message</a></li>
        </ul>
    </div>
}
