@using ESRGC.DLLR.EARN.Domain.Model
@using PagedList
@using PagedList.Mvc
@model Partnership

@{
    ViewBag.Title = "Partnership";
    ViewBag.Header = "Partnership Detail";
}

@section header{
    <div class="container">
        <header class="page-header">
            <h3>@ViewBag.Header <i class="glyphicon glyphicon-link"></i></h3>
            @*<ul class="breadcrumb">
                <li><a href="@Url.Action("index", "Home")">Home</a></li>
                <li class="active">@ViewBag.Header</li>
            </ul>*@
        </header>
    </div>
}
@section scripts {
    <!--[if lte IE9]>
       <script type="text/javascript">
        $(document).on('keyup', '#comment', function (e) {
            var messageLength = $(this).val().length;
            if (messageLength > 0) {
                $('#postCommentBtn').removeAttr('disabled');
            }
            else {
                $('#postCommentBtn').attr('disabled', 'disabled');
            }
        });
    </script>
    <![endif]-->
    <script type="text/javascript" src="@Url.Content("~/Client/jsLib/typeahead.js/typeahead.min.js")"></script>
    <script type="text/javascript">
        //for ie8
        if (typeof String.prototype.trim !== 'function') {
            String.prototype.trim = function () {
                return this.replace(/^\s+|\s+$/g, '');
            }
        }
        var startup = function () {
            //post comment button event
            $(document).on('input propertychange', '#comment', function (e) {
                var messageLength = $(this).val().length;
                if (messageLength > 0) {
                    $('#postCommentBtn').removeAttr('disabled');
                }
                else {
                    $('#postCommentBtn').attr('disabled', 'disabled');
                }
            });

            //Tag management
            var tagArray = [], originalTags = [];
            //preload tags array to match current tags
            $('input[name="tags"]').each(function (i) {
                var value = $(this).val();
                tagArray.push(value);
                originalTags.push(value);
            });
            console.log(tagArray);
            var tagExists = function (tag) {
                for (var i = 0; i < tagArray.length; i++) {
                    if (tagArray[i] == tag.toUpperCase())
                        return true;
                }
                return false;
            };
            var addTag = function (value) {
                value = value.toUpperCase();
                if (value.length > 50) {
                    $('.status-text').text("Can not add this tag [" + value + "]. The tag's length is too long. Please limit your tag charaters to 50 or less!");
                    $('input#tagInput').focus();
                    return;
                }
                if (tagExists(value)) {
                    $('.status-text').text('The tag "' + value + '" has already been added. Please enter a different tag!');
                    return;
                }
                if (value != '') {
                    tagArray.push(value);
                    $('input#tagInput').val('').focus();
                    $('.tag-list').append(
                        [
                            '<div class="tag">',
                                '<span class="label label-default">',
                                    value + '&nbsp;<a data-value="' + value + '"><i class="fa fa-times"></i></a>',
                                '</span>',
                            '</div>'
                        ].join('')
                    );
                    $('#tagForm').append('<input type="hidden" name="tags" value="' + value + '"/>')
                    $('.tt-hint').val('');
                    $('.status-text').text('');
                }
                else {
                    console.log('Tag already exists');
                }
            };
            var addTags = function () {
                var value = $('input#tagInput').val();
                //enable discard changes button
                if (value.length > 0) {
                    $('#tagDiscardBtn').removeAttr('disabled');
                }
                //separate the tags
                var tags = value.split(',');
                for (var i in tags) {
                    var tag = tags[i].trim();
                    addTag(tag);
                }

                console.log(tagArray);
            };
            var removeTag = function (value, tag) {
                if (typeof value == 'undefined')
                    return;
                //enable discard changes button
                $('#tagDiscardBtn').removeAttr('disabled');
                for (var i in tagArray) {
                    if (tagArray[i] == value) {
                        delete tagArray[i];
                    }
                }
                $('input[type="hidden"]').filter('[value="' + value + '"]').remove();
                //finally remove the whole node
                tag.parents().filter('.tag').remove();
                console.log('tag ' + value + ' removed');
                console.log(tagArray);
            };
            var discardChanges = function () {
                console.log(tagArray);
                $('#tagForm input').filter('input[name="tags"]').remove();
                $('.tag-list').html('');
                //remove all elements from tagArray
                for (var i in tagArray) {
                    delete tagArray[i];
                }
                //restore original tags
                for (var i in originalTags)
                    addTag(originalTags[i]);
                $('#tagDiscardBtn').attr('disabled', 'disabled');
            };
            $('#tagInput').typeahead({
                name: 'partnershipTag',
                //local: ['iphone', 'iphone 5s', 'iphone 5', 'C#', '.NET'],
                prefetch: {
                    url: '../tag/tags',
                    ttl: 1
                },
                //remote: {
                //    url: 'tags'
                //    //ttl: 5000
                //},
                limit: 20
            });
            //capture 'enter' key event to add tags
            $('input#tagInput').on('keypress', function (e) {
                if (e.keyCode == 13) {
                    addTags();
                }
            });
            $('.typeahead.input-sm').siblings('input.tt-hint').addClass('hint-small');
            $('.typeahead.input-lg').siblings('input.tt-hint').addClass('hint-large');
            $(document).on('click', '#tagSubmitBtn', function () { console.log('tag form submit clicked'); $('#tagForm').submit(); });
            //click event on add button
            $('#addTagBtn').on('click', function (e) {
                addTags();
            });
            $('#tagForm').on('submit', function (e) {
                if (tagArray.length == 0) {
                    $('.status-text').text('Please add at least one tag before procceding!');
                    e.preventDefault();
                    return false;
                }
                return true;
            });
            //$('input:text').focus(function () { $(this).select(); });
            //remove button events
            $(document).on('click', '.tag a', function (e) {
                //get value and remove hidden fields
                var value = $(this).attr('data-value');
                removeTag(value, $(this));
            });
            $(document).on('click', '#tagDiscardBtn', function (e) { discardChanges(); });
        }
    </script>
}
@{ 
    var p = Model;
    var partners = p.getPartners();
    var owner = p.getOwner();
    var returnUrl = ViewBag.returnUrl as string ?? Url.Action("Index");
    ViewBag.returnUrl = Url.Action("Detail", new { p.PartnershipID, returnUrl });
    var currentProfile = ViewBag.currentProfile as Profile ?? new Profile();
    var canEdit = currentProfile.isOwnerOfPartnership(Model);
    var comments = ViewBag.comments as PagedList<Comment> ?? new PagedList<Comment>(new List<Comment>(), 1, 10);
    //tags
    var currentTags = Model.getTags();
    var isOwner = currentProfile.isOwnerOfPartnership(Model);
}

<div class="container">
    <div class="row">
        <div class="col-md-7">
            <div class="panel-action-default">
                @if (!string.IsNullOrEmpty(returnUrl)) {
                    <a href="@returnUrl"><i class="fa fa-long-arrow-left"></i>&nbsp;Back to previous</a>
                }
                <small class="pull-right">Last edited: @Html.TimeSpan(p.LastUpdate)</small>
            </div>
            <div class="window-panel">
                <div class="window-panel-title">
                    <strong>@p.Name</strong>
                    @if (canEdit) { 
                        <a title="Edit this partnership" href="@Url.Action("Edit", new { p.PartnershipID, returnUrl })"><i class="fa fa-pencil"></i></a>
                        <a title="Delete this partnership" href="@Url.Action("Delete", new { Model.PartnershipID, returnUrl })" class="pull-right text-danger">
                            <i class="fa fa-times-circle"></i>&nbsp;Delete partnership
                        </a>
                    }
                </div>
                <div class="window-panel-content">
                    <p class=""><strong>Description</strong> @p.Description</p>
                    <p>
                        <strong>Status</strong>
                        @switch (p.Status) {
                            case "Initiating":
                            <span class="text-danger">@p.Status</span>
                                break;
                            case "Partnering/drafting proposal":
                            <span class="text-warning">@p.Status</span>
                                break;
                            case "Partnered/proposed":
                            <span class="text-success">@p.Status</span>
                                break;
                        }
                    </p>
                    <p>
                        <strong>Grant</strong>
                        @switch (p.GrantStatus) {
                            case "Pre-draft":
                            <span class="text-danger"><i class="fa fa-minus-circle"></i>&nbsp;@p.GrantStatus</span>
                                break;
                            case "Drafting":
                            <span class="text-warning"><i class="fa fa-pencil"></i>&nbsp;@p.GrantStatus</span>
                                break;
                            case "Submitted":
                            <span class="text-info"><i class="fa fa-check"></i>&nbsp;@p.GrantStatus</span>
                                break;
                            case "Awarded":
                            <span class="text-success"><i class="fa fa-check-circle"></i>&nbsp;@p.GrantStatus</span>
                                break;
                        }
                    </p>
                    <hr />
                    <div class="panel-group" id="partnershipDetail">
                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <h5 class="panel-title">
                                    <a data-toggle="collapse" data-parent="#partnershipDetail" href="#tags">Target Industry Tags&nbsp;<i class="fa fa-tags"></i></a>
                                </h5>
                            </div>
                            <div id="tags" class="panel-collapse collapse in">
                                <div class="panel-body">
                                    @if (isOwner) { 
                                        <div class="owner-view">
                                            <form id="tagForm" class="form-inline" action="@Url.Action("ManagePartnershipTag", "Tag")" method="post">
                                                <div class="form-group typeahead-container">
                                                    <input type="text"
                                                        class="form-control typeahead"
                                                        placeholder="e.g. Healthcare, Analyst"
                                                        name="tag"
                                                        id="tagInput" />
                                                </div>
                                                <button type="button" class="btn btn-primary" id="addTagBtn"><i class="fa fa-plus"></i>&nbsp;Add</button>
                                                <div><span id="" class="text-danger status-text"></span></div>
                                                <p class="text-warning">
                                                    Enter tags one at a time
                                                </p>
                                                <input type="hidden" value="@Model.PartnershipID" name="partnershipID"/>
                                                <input type="hidden" name="returnUrl" value="@Url.Action("Detail", new { Model.PartnershipID, returnUrl })"/>

                                                @foreach (var i in currentTags) { 
                                                    <input type="hidden" value="@i.Name" name="tags"/>
                                                }
                                            </form>
                                            <hr />
                                            <h5>Current Tags</h5>
                                            <div class="post">
                                                @Html.Partial("tagListEditPartial", currentTags.Select(x => x.Name).ToList())
                                            </div>
                                            <br />
                                            <div class="pull-right">
                                                <button id="tagSubmitBtn" class="btn btn-primary btn-sm" type="submit"><i class="fa fa-save"></i>&nbsp;Save changes</button>
                                                <button id="tagDiscardBtn" class="btn btn-default btn-sm" disabled>Discard changes</button>
                                            </div>

                                            <div class="clear"></div>
                                        </div>
                                    }
                                    else {
                                        @Html.Partial("tagListDisplayPartial", currentTags.Select(x => x.Name).ToList())
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <h5 class="panel-title">
                                    <a data-toggle="collapse" data-parent="#partnershipDetail" href="#documents">Documents&nbsp<i class="fa fa-folder-open"></i></a>
                                </h5>
                            </div>
                            <div id="documents" class="panel-collapse collapse">
                                <div class="panel-body">
                                    <h4>Documents</h4>
                                    <p>Documents sharing is coming soon</p>
                                </div>
                            </div>
                        </div>
                        <div class="panel panel-info">
                            <div class="panel-heading">
                                <h5 class="panel-title">
                                    <a data-toggle="collapse" data-parent="#partnershipDetail" href="#partners">Partners&nbsp;<i class="fa fa-group"></i></a>
                                </h5>
                            </div>
                            <div id="partners" class="panel-collapse collapse">
                                <div class="panel-body">
                                    <div class="profile-container-holder">
                                        <span class="label label-danger">Owner</span>
                                        @Html.Partial("shortProfilePartial", owner)
                                        <hr />
                                    </div>
                                    <strong>Other Partners</strong>
                                    @if (partners.Count == 0) { 
                                        <p>
                                            There's currently no other partner in this partnership. 
                                            You can invite new partners through search or your connections in profile page.
                                        </p>
                                    }
                                    @foreach (var profile in partners) { 
                                        <div class="placeholder-panel">
                                            @Html.Partial("shortProfilePartial", profile)
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="">
                <h4><i class="fa fa-comments"></i>&nbsp;Comments</h4>
                @if (comments.PageCount > 1) {
                    @Html.PagedListPager(
                    comments,
                    page => Url.Action("Detail", new { Model.PartnershipID, page, returnUrl }),
                    PagedListRenderOptions.OnlyShowFivePagesAtATime
                )}
                @Html.Partial("ListComments", comments)
                @if (comments.PageCount > 1) {
                    @Html.PagedListPager(
                    comments,
                    page => Url.Action("Detail", new { Model.PartnershipID, page, returnUrl }),
                    PagedListRenderOptions.OnlyShowFivePagesAtATime
                )}
                <div class="transparent-placeholder-panel">
                    <form class="form-horizontal" method="post" action="@Url.Action("PostComment", "Communication")">
                        @Html.HiddenFor(x => x.PartnershipID)
                        <input type="hidden" name="returnUrl" value="@Url.Action("Detail", new { Model.PartnershipID, returnUrl })"/>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.TextArea("comment", new {
                               @class = "form-control input-sm comment-box",
                               placeholder = "Post your comment here"
                           })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                <button type="submit" id="postCommentBtn" disabled class="btn btn-primary btn-sm">
                                    <i class="fa fa-comment"></i>&nbsp;Post comment
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
    </div>
</div>
